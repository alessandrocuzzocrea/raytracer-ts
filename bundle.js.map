{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/settings.ts","webpack:///./src/color.ts","webpack:///./src/vec3.ts","webpack:///./src/abstractray.ts","webpack:///./src/hitinfo.ts","webpack:///./src/main.ts","webpack:///./src/raytracer.ts","webpack:///./src/viewport.ts","webpack:///./src/cameraray.ts","webpack:///./src/illuminationray.ts","webpack:///./src/scene.ts","webpack:///./src/sphere.ts","webpack:///./src/light.ts","webpack:///./src/plane.ts","webpack:///./src/ui.ts","webpack:///./src/controller.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","WIDTH","HEIGHT","DEBUG_NORMALS","AA","RENDER_YELLOW_SPHERE","RENDER_RED_SPHERE","RENDER_PLANE","LIGHTS","CHECKERBOARD_PATTERN","Settings","g","b","this","Red","Color","Black","MidnightBlue","Magenta","White","Yellow","Green","x","y","z","Zero","Vec3","Up","Forward","Length","a","Math","pow","sqrt","Normalized","length","Add","v","Subtract","ScalarMultiply","k","Dot","origin","direction","hitInfo","Array","CalcPointAtT","AddHit","push","sort","GetNearerHit","AbstractRay","hit","hitPoint","normal","color","HitPoint","GetColor","HitInfo","ui","UI","raytracer","Raytracer","controller","Controller","Clear","Render","width","height","viewport","Viewport","FillRandom","scene","Scene","clearColor","ClearColor","Height","rays","GetRays","forEach","ray","rayColor","Shoot","DrawPixel","Width","GetBuffer","buffer","Uint8ClampedArray","Ratio","random","count","res","j","dirX","dirY","CameraRay","offset","Objects","intersect","SpawnChildIlluminationRay","Light","intensity","illuminationRay","localColor","light","pointToLight","position","IlluminationRay","parentRay","max","objects","Sphere","Plane","radius","x_o","y_o","z_o","x_d","y_d","z_d","x_c","y_c","z_c","A","B","C","discriminant","t_0","E","x_i","y_i","z_i","P_n","R_o","R_d","u","abs","canvas","document","getElementById","context","getContext","renderingMessageDiv","clearButton","fillRandomButton","renderButton","saveToPNGButton","lightsButton","redSphereButton","yellowSphereButton","groundButton","checkerboardButton","aaButton","UpdateButtons","classList","remove","add","ShowRenderingMessage","HideRenderingMessage","SetClearButtonOnClick","fn","onclick","SetFillRandomButtonOnClick","SetRenderButtonOnClick","SetSaveToPNGButtonOnClick","DrawCanvas","putImageData","ImageData","SaveToPNG","window","open","body","innerHTML","toDataURL","SetLightsButtonOnClick","SetRedSphereButtonOnClick","SetYellowSphereButtonOnClick","SetGroundButtonOnClick","SetCheckerBoardButtonOnClick","SetAAButtonOnClick","ToggleRedSphere","ToggleYellowSphere","ToggleLights","TogglePlane","ToggleCheckerboardPattern","ToggleAA","setTimeout","UpdateUI"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","export class Settings {\n    public static readonly WIDTH                = 640;\n    public static readonly HEIGHT               = 480;\n    public static          DEBUG_NORMALS        = false;\n    public static          AA                   = true;\n    public static          RENDER_YELLOW_SPHERE = true;\n    public static          RENDER_RED_SPHERE    = true;\n    public static          RENDER_PLANE         = true;\n    public static          LIGHTS               = true;\n    public static          CHECKERBOARD_PATTERN = true;\n}\n","export class Color {\n    r: number;\n    g: number;\n    b: number;\n\n    constructor(r:number, g:number, b:number) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    public static Red(): Color {\n        return new Color(231, 76, 60);\n    }\n\n    public static Black(): Color {\n        return new Color(0, 0, 0);\n    }\n\n    public static MidnightBlue(): Color {\n        return new Color(44, 62, 80);\n    }\n\n    public static Magenta(): Color {\n        return new Color(155, 89, 182);\n    }\n\n    public static White(): Color {\n        return new Color(255, 255, 255);\n    }\n\n    public static Yellow(): Color {\n        return new Color(241, 196, 15);\n    }\n\n    public static Green(): Color {\n        return new Color(46, 204, 113)\n    }\n}\n","export class Vec3 {\n    x: number;\n    y: number;\n    z: number;\n\n    constructor(x: number, y: number, z:number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public static Zero(): Vec3 {\n        return new Vec3(0, 0, 0);\n    }\n\n    public static Up(): Vec3 {\n        return new Vec3(0, 1, 0);\n    }\n\n    public static Forward(): Vec3 {\n        return new Vec3(0, 0, 1);\n    }\n\n    public Length(): number {\n        let a = Math.pow(this.x, 2);\n        let b = Math.pow(this.y, 2);\n        let c = Math.pow(this.z, 2);\n        return Math.sqrt(a + b + c);\n    }\n\n    public Normalized(): Vec3 {\n        let length = this.Length();\n        return new Vec3(\n            this.x / length,\n            this.y / length,\n            this.z / length\n        );\n    }\n\n    public Add(v: Vec3): Vec3 {\n        return new Vec3(\n            this.x + v.x,\n            this.y + v.y,\n            this.z + v.z\n        );\n    }\n\n    public Subtract(v: Vec3): Vec3 {\n        return new Vec3(\n            this.x - v.x,\n            this.y - v.y,\n            this.z - v.z\n        );\n    }\n\n    public ScalarMultiply(k: number): Vec3 {\n        return new Vec3(\n            this.x * k,\n            this.y * k,\n            this.z * k,\n        );\n    }\n\n    public Dot(v: Vec3): number {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n}\n","import { Vec3 } from \"./vec3\";\nimport { HitInfo } from './hitinfo';\nimport { Scene } from \"./scene\";\nimport { Color } from \"./color\";\nimport { IlluminationRay } from \"./illuminationray\";\nimport { Light } from \"./light\";\n\nexport abstract class AbstractRay {\n    origin : Vec3;\n    direction : Vec3;\n    public hitInfo : Array<HitInfo>;\n    // public childRays: Array<AbstractRay>;\n    public parentRay : AbstractRay;\n    public illuminationRay : IlluminationRay;\n\n    constructor(origin: Vec3, direction: Vec3) {\n        this.origin = origin;\n        this.direction = direction.Normalized();\n        this.hitInfo = new Array<HitInfo>();\n\n        // this.childRays = new Array<AbstractRay>();\n    }\n\n    public CalcPointAtT(t: number): Vec3 {\n        return this.origin.Add(this.direction.ScalarMultiply(t));\n    }\n\n    public AddHit(hitInfo: HitInfo) {\n        this.hitInfo.push(hitInfo);\n        this.hitInfo.sort((a, b) => {  //TODO: float comparison\n            if (a.t > b.t) return 1;\n            if (a.t < b.t) return -1;\n            return 0;\n        });\n    }\n\n    public GetNearerHit() {\n        if (this.hitInfo.length == 0) return null;\n        return this.hitInfo[0];\n    }\n\n    //TODO: find a better name for this method\n    abstract Shoot(scene: Scene): Color;\n}\n","import { Vec3 } from \"./vec3\";\nimport { Color } from \"./color\";\nimport { Settings } from \"./settings\";\n\nexport class HitInfo {\n   hit: boolean\n   t: number\n   hitPoint: Vec3 //TODO: terrible name\n   normal: Vec3\n   color: Color\n\n   constructor(hit: boolean, t: number, hitPoint: Vec3, normal: Vec3, color: Color) {\n        this.hit = hit;\n        this.t = t;\n        this.hitPoint = hitPoint;\n        this.normal = normal; //TODO: look into Typescript optional types\n        this.color = color;\n    }\n\n    public HitPoint(): Vec3 {\n        return new Vec3(\n            this.hitPoint.x,\n            this.hitPoint.y,\n            this.hitPoint.z\n        );\n    }\n\n    public GetColor() {\n        if (Settings.DEBUG_NORMALS) {\n            return new Color(\n                this.normal.x * 255,\n                this.normal.y * 255,\n                this.normal.z * 255 * -1,\n            );\n        } else {\n            return new Color(\n                this.color.r,\n                this.color.g,\n                this.color.b\n            );\n        }\n    }\n}\n","import { Settings } from './settings';\nimport { Raytracer } from './raytracer';\nimport { UI } from './ui';\nimport { Controller } from './controller';\n\nlet ui = new UI(Settings.WIDTH, Settings.HEIGHT);\nlet raytracer = new Raytracer(Settings.WIDTH, Settings.HEIGHT);\nlet controller = new Controller(ui, raytracer);\n\ncontroller.Clear();\ncontroller.Render();\n","import { Viewport } from './viewport'\nimport { Scene } from './scene';\nimport { Color } from './color';\nimport { Settings } from './settings';\n\nexport class Raytracer {\n    private viewport: Viewport;\n    private scene: Scene;\n\n    constructor(width: number, height: number) {\n        this.viewport = new Viewport(width, height);\n    }\n\n    Clear() {\n        this.viewport.Clear();\n    }\n\n    FillRandom() {\n        this.viewport.FillRandom();\n    }\n\n    Render() {\n        this.scene = new Scene();\n        let clearColor = this.viewport.ClearColor();\n\n        for (var y: number = 0; y < this.viewport.Height(); y++) {\n            for (var x: number = 0; x < this.viewport.Width(); x++) {\n                let rays = this.viewport.GetRays(x, y, Settings.AA ? 4 : 1);\n                let r: number = 0;\n                let g: number = 0;\n                let b: number = 0;\n\n                rays.forEach(ray => {\n                    let rayColor = ray.Shoot(this.scene);\n                    r += rayColor ? rayColor.r : clearColor.r;\n                    g += rayColor ? rayColor.g : clearColor.g;\n                    b += rayColor ? rayColor.b : clearColor.b;\n                });\n\n                this.viewport.DrawPixel(x, y, new Color(r / rays.length, g / rays.length, b / rays.length));\n            }\n        }\n    }\n\n    GetBuffer(): Uint8ClampedArray {\n        return this.viewport.GetBuffer();\n    }\n}\n","import { Vec3 } from \"./vec3\";\nimport { Color } from \"./color\";\nimport { CameraRay } from \"./cameraray\";\n\nexport class Viewport {\n    private width: number\n    private height: number\n    private buffer: Uint8ClampedArray\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n        this.buffer = new Uint8ClampedArray(width * height * 4);\n\n        this.Clear();\n    }\n\n    GetBuffer() {\n        return this.buffer;\n    }\n\n    Width(): number {\n        return this.width;\n    }\n\n    Height(): number {\n        return this.height;\n    }\n\n    Ratio(): number {\n        return this.width / this.height;\n    }\n\n    ClearColor(): Color {\n        return Color.Magenta();\n    }\n\n    Clear() {\n        let clearColor = this.ClearColor();\n        for(var i = 0; i < this.width * this.height * 4;) {\n            this.buffer[i+0] = clearColor.r;\n            this.buffer[i+1] = clearColor.g;\n            this.buffer[i+2] = clearColor.b;\n            this.buffer[i+3] = 255;\n            i += 4;\n        }\n    }\n\n    FillRandom() {\n        for(var i = 0; i < this.width * this.height * 4;) {\n            this.buffer[i+0] = Math.random() * 255;\n            this.buffer[i+1] = Math.random() * 255;\n            this.buffer[i+2] = Math.random() * 255;\n            this.buffer[i+3] = 255;\n            i += 4;\n        }\n    }\n\n    GetRays(x: number, y: number, count: number): Array<CameraRay> {\n        let res = new Array<CameraRay>();\n\n        for(let j = 0; j < 1; j += 1/count) {\n            for(let i = 0; i < 1; i += 1/count) {\n               //TODO: cast the ray from the center for the pixel\n                let dirX: number = (this.Ratio() / this.width) * ( x + i ) - this.Ratio()/2;\n                let dirY: number = 1/2 - (1 / this.height) * ( y + j );\n\n                res.push(new CameraRay(new Vec3(0,0,0), new Vec3(dirX, dirY, 1)));\n            }\n        }\n\n        return res;\n    }\n\n    DrawPixel(x: number, y: number, color: Color) {\n        let offset = this.width * y + x;\n        this.buffer[offset * 4 + 0] = color.r;\n        this.buffer[offset * 4 + 1] = color.g;\n        this.buffer[offset * 4 + 2] = color.b;\n        this.buffer[offset * 4 + 3] = 255;\n    }\n}\n","import { Scene } from \"./scene\";\nimport { Color } from \"./color\";\nimport { AbstractRay } from \"./abstractray\";\nimport { IlluminationRay } from \"./illuminationray\";\nimport { Light } from \"./light\";\nimport { Settings } from \"./settings\";\n\nexport class CameraRay extends AbstractRay {\n\n    public Shoot(scene: Scene): Color {\n        let color: Color = null;\n        for (let i = 0; i < scene.Objects().length; i++) {\n            const object    = scene.Objects()[i];\n            let hitInfo     = object.intersect(this);\n            if (hitInfo.hit) this.AddHit(hitInfo);\n        }\n\n        let hitInfo = this.GetNearerHit();\n        if (hitInfo) {\n            this.SpawnChildIlluminationRay(scene.Light());\n            let intensity = Settings.LIGHTS ? this.illuminationRay.Shoot(scene/*, object*/) : new Color(1, 1, 1);\n\n            let localColor: Color = hitInfo.GetColor();\n            color = new Color(localColor.r * intensity.r, localColor.g * intensity.g, localColor.b * intensity.b);\n        }\n        return color;\n    }\n\n    public SpawnChildIlluminationRay(light: Light) {\n        const origin = this.GetNearerHit().HitPoint();\n        const pointToLight = light.position.Subtract(origin).Normalized();\n\n        this.illuminationRay = new IlluminationRay(origin, pointToLight);\n        this.illuminationRay.parentRay = this;\n    }\n}\n","import { Scene } from \"./scene\";\nimport { Color } from \"./color\";\nimport { AbstractRay } from \"./abstractray\";\nimport { IIntersectable } from \"./iintersectable\";\n\nexport class IlluminationRay extends AbstractRay {\n\n    public Shoot(scene: Scene, /*excludeObject: IIntersectable*/): Color {\n        for (let i = 0; i < scene.Objects().length; i++) {\n            const object = scene.Objects()[i];\n            // if (object == excludeObject) break;\n\n            const hitInfo = object.intersect(this);\n            if (hitInfo.hit) {\n                this.AddHit(hitInfo);\n                return new Color(0, 0, 0);\n            }\n        }\n        const intensity = Math.max(0, this.direction.Dot(this.parentRay.GetNearerHit().normal));\n        return new Color(intensity, intensity, intensity);\n    }\n}\n","import { Color } from \"./color\"\nimport { Vec3 } from \"./vec3\"\nimport { IIntersectable } from \"./iintersectable\"\nimport { Sphere } from \"./sphere\"\nimport { Light } from \"./light\"\nimport { Plane } from \"./plane\"\nimport { Settings } from \"./settings\"\n\nexport class Scene {\n    private light: Light\n\n    private objects: Array<IIntersectable>\n\n    constructor() {\n        this.objects = new Array();\n\n        this.light = new Light(new Vec3(1000, 1000, 3))\n\n        if (Settings.RENDER_YELLOW_SPHERE) {\n            this.objects.push(new Sphere(new Vec3(.9, 0.5, 2.4), 0.1, Color.Yellow()));\n        }\n\n        if (Settings.RENDER_RED_SPHERE) {\n            this.objects.push(new Sphere(new Vec3(0, 0, 3), 1, Color.Red()));\n        }\n\n        if (Settings.RENDER_PLANE) {\n            this.objects.push(new Plane(Vec3.Up(), Color.Green()));\n        }\n    }\n\n    Objects(): Array<IIntersectable> {\n        return this.objects;\n    }\n\n    Light(): Light {\n        return this.light;\n    }\n}\n","import { IIntersectable } from './iintersectable'\n\nimport { Vec3 } from './vec3'\nimport { AbstractRay } from './abstractray'\nimport { HitInfo } from './hitinfo'\nimport { Color } from './color'\n\nexport class Sphere implements IIntersectable {\n    origin: Vec3\n    radius: number\n    color: Color\n\n    constructor(origin: Vec3, radius: number, color: Color) {\n        this.origin = origin;\n        this.radius = radius;\n        this.color = color;\n    }\n\n    /**\n     * Ray-Sphere Intersection (using the Algebraic Solution)\n     */\n    intersect(ray: AbstractRay): HitInfo {\n        //Ray: r_o + r_d * t\n        let x_o = ray.origin.x;\n        let y_o = ray.origin.y;\n        let z_o = ray.origin.z;\n        let x_d = ray.direction.x;\n        let y_d = ray.direction.y;\n        let z_d = ray.direction.z;\n\n        // Sphere: (x_s - x_c)^2 + (y_s - y_c)^2 + (z_s - z_c)^2 = r^2\n        let x_c = this.origin.x;\n        let y_c = this.origin.y;\n        let z_c = this.origin.z;\n        let r   = this.radius;\n\n        // (x_o + x_d * t - x_c)^2 + (y_o + y_d * t - y_c)^2 + (z_o + z_d * t - z_c)^2 = r^2\n        //\n        // solve for t\n        // A * t^2 + B * t + C (quadratic equation)\n        // where\n        // A = x_d^2 + y_d^2 + z_d^2\n        // B = 2 * (x_d * (x_o - x_c)+ y_d * (y_o - y_c) + z_d * (z_o - z_c))\n        // C = (x_o - x_c)^2 + (y_o - y_c)^2 + (z_o - z_c)^2 - r^2\n        let A = x_d ** 2 + y_d ** 2 + z_d ** 2\n        let B = 2 * (x_d * (x_o - x_c)+ y_d * (y_o - y_c) + z_d * (z_o - z_c));\n        let C = (x_o - x_c) ** 2 + (y_o - y_c) ** 2 + (z_o - z_c) ** 2 - r ** 2\n\n        // if the quadratic equation discriminant (B^2 - 4AC)\n        //  > 0 then intersect in two points\n        //  = 0 then intersect in one point\n        //  < 0 then there is no intersection\n        let discriminant = B ** 2 - 4 * A * C;\n\n        if (discriminant >= 0) {\n            // Use the quadratic formula to find t\n            let t_0 = ( -B - Math.sqrt(discriminant) ) / 2 * A;\n\n            // Remember: if t < 0 then the intersection is behind the ray's origin\n            if (t_0 < 0) return new HitInfo(false, -Math.E, null, null, null); //TODO: this is ugly, e usage is random and meaningless here\n\n            //Use t to find intersection point\n            let x_i = x_o + x_d * t_0;\n            let y_i = y_o + y_d * t_0;\n            let z_i = z_o + z_d * t_0;\n\n            let hitPoint: Vec3 = new Vec3(x_i, y_i, z_i);\n            let normal: Vec3 = new Vec3((x_i - x_c)/r, (y_i - y_c)/r, (z_i - z_c)/r);\n\n            return new HitInfo(true, t_0, hitPoint, normal, new Color(this.color.r, this.color.g, this.color.b));\n        } else {\n            return new HitInfo(false, -Math.E, null, null, null); //TODO: this is ugly part 2, e usage is random and meaningless here\n        }\n    }\n}\n","import { Vec3 } from \"./vec3\";\n\nexport class Light {\n    public position: Vec3\n\n    constructor(position: Vec3) {\n        this.position = position;\n    }\n}\n","import { IIntersectable } from './iintersectable'\n\nimport { Vec3 } from './vec3'\nimport { AbstractRay } from './abstractray'\nimport { HitInfo } from './hitinfo'\nimport { Color } from './color'\nimport { Settings } from './settings'\n\nexport class Plane implements IIntersectable {\n    origin: Vec3\n    normal: Vec3\n    color: Color\n\n    constructor(/*origin: Vec3,*/ normal: Vec3, color: Color) {\n        // this.origin = origin;\n        this.normal = normal.Normalized();\n        this.color = color;\n    }\n\n    intersect(ray: AbstractRay): HitInfo {\n        const P_n = this.normal;\n        const R_o = ray.origin;\n        const R_d = ray.direction;\n        const D   = 1; //basically D is the translation of distance along the normal vector, also it's the distance between the plane and the origin of the coordinate system\n\n        let t = - ( P_n.Dot(R_o) + D ) / P_n.Dot(R_d);\n\n        if (t > 0) {\n            let x_i = ray.origin.x + ray.direction.x * t;\n            let y_i = ray.origin.y + ray.direction.y * t;\n            let z_i = ray.origin.z + ray.direction.z * t;\n\n            let hitPoint: Vec3 = new Vec3(x_i, y_i, z_i);\n            let normal: Vec3 = P_n;\n\n\n            const u = Math.abs(hitPoint.x % 1);\n            const v = Math.abs(hitPoint.z % 1);\n\n            let color = null;\n\n            //TODO: this need a refactor\n            if (Settings.CHECKERBOARD_PATTERN) {\n                if (u < .5 && v < .5 || u > .5 && v > .5) {\n                    color = this.color;\n                } else {\n                    color = Color.White();\n                }\n            } else {\n                color = this.color;\n            }\n\n            return new HitInfo(true, t, hitPoint, normal, color);\n        } else {\n            return new HitInfo(false, -Math.E, null, null, null); //TODO: this is ugly, e usage is random and meaningless here\n        }\n    }\n}\n","import { Settings } from \"./settings\";\n\nexport class UI {\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D\n    private renderingMessageDiv: HTMLDivElement;\n    private clearButton: HTMLButtonElement;\n    private fillRandomButton: HTMLButtonElement;\n    private renderButton: HTMLButtonElement;\n    private saveToPNGButton: HTMLButtonElement;\n    private lightsButton: HTMLButtonElement;\n    private redSphereButton: HTMLButtonElement;\n    private yellowSphereButton: HTMLButtonElement;\n    private groundButton: HTMLButtonElement;\n    private checkerboardButton: HTMLButtonElement;\n    private aaButton: HTMLButtonElement;\n\n    constructor(width: number, height: number) {\n        this.canvas = <HTMLCanvasElement>document.getElementById('canvas');\n        this.context = this.canvas.getContext('2d');\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.renderingMessageDiv = <HTMLDivElement>document.getElementById('rendering-message');\n\n        this.clearButton = <HTMLButtonElement>document.getElementById('clear-button');\n        this.fillRandomButton = <HTMLButtonElement>document.getElementById('fill-random-button');\n        this.renderButton = <HTMLButtonElement>document.getElementById('render-button');\n        this.saveToPNGButton = <HTMLButtonElement>document.getElementById('save-to-png-button');\n\n        this.lightsButton = <HTMLButtonElement>document.getElementById('lights-button');\n        this.redSphereButton = <HTMLButtonElement>document.getElementById('red-sphere-button');\n        this.yellowSphereButton = <HTMLButtonElement>document.getElementById('yellow-sphere-button');\n        this.groundButton = <HTMLButtonElement>document.getElementById('ground-button');\n        this.checkerboardButton = <HTMLButtonElement>document.getElementById('checkerboard-button');\n        this.aaButton = <HTMLButtonElement>document.getElementById('aa-button');\n    }\n\n    UpdateButtons() {\n        let className = 'disabled';\n\n        this.lightsButton.classList.remove(className);\n        this.redSphereButton.classList.remove(className);\n        this.yellowSphereButton.classList.remove(className);\n        this.groundButton.classList.remove(className);\n        this.checkerboardButton.classList.remove(className);\n        this.aaButton.classList.remove(className);\n\n        if (!Settings.LIGHTS) this.lightsButton.classList.add(className);\n        if (!Settings.RENDER_RED_SPHERE) this.redSphereButton.classList.add(className);\n        if (!Settings.RENDER_YELLOW_SPHERE) this.yellowSphereButton.classList.add(className);\n        if (!Settings.RENDER_PLANE) this.groundButton.classList.add(className);\n        if (!Settings.CHECKERBOARD_PATTERN) this.checkerboardButton.classList.add(className);\n        if (!Settings.AA) this.aaButton.classList.add(className);\n    }\n\n    ShowRenderingMessage() {\n        this.renderingMessageDiv.classList.remove('hidden');\n    }\n\n    HideRenderingMessage() {\n        this.renderingMessageDiv.classList.add('hidden');\n\n    }\n\n    SetClearButtonOnClick(fn:() => void) {\n        this.clearButton.onclick = fn;\n    }\n\n    SetFillRandomButtonOnClick(fn:() => void) {\n        this.fillRandomButton.onclick = fn;\n    }\n\n    SetRenderButtonOnClick(fn:() => void) {\n        this.renderButton.onclick = fn;\n    }\n\n    SetSaveToPNGButtonOnClick(fn:() => void) {\n        this.saveToPNGButton.onclick = fn;\n    }\n\n    DrawCanvas(buffer: Uint8ClampedArray) {\n        this.context.putImageData(new ImageData(buffer, this.canvas.width, this.canvas.height), 0, 0);\n    }\n\n    SaveToPNG() {\n        var newTab = window.open();\n        newTab.document.body.innerHTML = '<img src=\"' + this.canvas.toDataURL() + '\">';\n    }\n\n    SetLightsButtonOnClick(fn:() => void) {\n        this.lightsButton.onclick = fn;\n    }\n\n    SetRedSphereButtonOnClick(fn:() => void) {\n        this.redSphereButton.onclick = fn;\n    }\n\n    SetYellowSphereButtonOnClick(fn:() => void) {\n        this.yellowSphereButton.onclick = fn;\n    }\n\n    SetGroundButtonOnClick(fn:() => void) {\n        this.groundButton.onclick = fn;\n    }\n\n    SetCheckerBoardButtonOnClick(fn:() => void) {\n        this.checkerboardButton.onclick = fn;\n    }\n\n    SetAAButtonOnClick(fn:() => void) {\n        this.aaButton.onclick = fn;\n    }\n}\n","import { UI } from \"./ui\";\nimport { Raytracer } from \"./raytracer\";\nimport { Settings } from \"./settings\";\n\nexport class Controller {\n    private ui: UI;\n    private raytracer: Raytracer;\n\n    constructor(ui: UI, raytracer: Raytracer) {\n        this.ui = ui;\n        this.raytracer = raytracer;\n\n        ui.SetClearButtonOnClick(()=>this.Clear());\n        ui.SetFillRandomButtonOnClick(()=>this.FillRandom());\n        ui.SetRenderButtonOnClick(()=>this.Render());\n        ui.SetSaveToPNGButtonOnClick(()=>this.SaveToPNG());\n        ui.SetRedSphereButtonOnClick(()=>this.ToggleRedSphere());\n        ui.SetYellowSphereButtonOnClick(()=>this.ToggleYellowSphere());\n        ui.SetLightsButtonOnClick(()=>this.ToggleLights());\n        ui.SetGroundButtonOnClick(()=>this.TogglePlane());\n        ui.SetCheckerBoardButtonOnClick(()=>this.ToggleCheckerboardPattern());\n        ui.SetAAButtonOnClick(()=>this.ToggleAA());\n    }\n\n    Clear() {\n        this.raytracer.Clear();\n        this.ui.DrawCanvas(this.raytracer.GetBuffer());\n    }\n\n    FillRandom() {\n        this.raytracer.FillRandom();\n        this.ui.DrawCanvas(this.raytracer.GetBuffer());\n    }\n\n    Render() {\n        setTimeout(()=>{\n            this.raytracer.Render();\n            this.ui.DrawCanvas(this.raytracer.GetBuffer());\n            this.ui.HideRenderingMessage();\n        },0);\n        this.ui.ShowRenderingMessage();\n    }\n\n    UpdateUI() {\n        this.ui.UpdateButtons();\n    }\n\n    SaveToPNG() {\n        this.ui.SaveToPNG();\n    }\n\n    ToggleLights() {\n        Settings.LIGHTS = !Settings.LIGHTS;\n        this.Render();\n        this.UpdateUI();\n\n    }\n\n    ToggleYellowSphere() {\n        Settings.RENDER_YELLOW_SPHERE = !Settings.RENDER_YELLOW_SPHERE;\n        this.Render();\n        this.UpdateUI();\n    }\n\n    ToggleRedSphere() {\n        Settings.RENDER_RED_SPHERE = !Settings.RENDER_RED_SPHERE;\n        this.Render();\n        this.UpdateUI();\n    }\n\n    TogglePlane() {\n        Settings.RENDER_PLANE = !Settings.RENDER_PLANE;\n        this.Render();\n        this.UpdateUI();\n    }\n\n    ToggleCheckerboardPattern() {\n        Settings.CHECKERBOARD_PATTERN = !Settings.CHECKERBOARD_PATTERN;\n        if (Settings.RENDER_PLANE) this.Render();\n        this.UpdateUI();\n    }\n\n    ToggleAA() {\n        Settings.AA = !Settings.AA;\n        this.Render();\n        this.UpdateUI();\n    }\n}\n"],"sourceRoot":""}